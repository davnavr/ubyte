.module Arrays
.format 0 0
.version 1

.identifier @id_namespace Example
.identifier @id_class Arrays
.identifier @id_entry_point main

.signature @sig_int32 type s32
.signature @sig_string32 type char32[]
.signature @sig_argv type char32[][]
.signature @sig_main method (@sig_int32) (@sig_argv)

.code @code_main {
    .arguments ($a_argv)
    .locals ($l_init_zero, $l_init_length, $l_index, $l_next_index, $l_acc, $l_sum)
    .block $ENTRY {
        $l_init_zero = const.zero s32
        $l_init_length = obj.arr.len s32 $a_argv
        br $LOOP_START
    }
    .block $LOOP_START {
        $l_sum = phi $l_init_zero when $ENTRY or $l_acc when $LOOP_BODY
        $l_index = phi $l_init_zero when $ENTRY or $l_next_index when $LOOP_BODY
        br.eq $l_index $l_init_length then $END else $LOOP_BODY
    }
    .block $LOOP_BODY {
        %t_arg = obj.arr.get $a_argv $l_index
        %t_length = obj.arr.len s32 %t_arg
        $l_acc = add @sig_int32 $l_sum %t_length
        %t_one = const.i s32 1
        $l_next_index = add @sig_int32 $l_index %t_one
        br $LOOP_START
    }
    .block $END {
        ret $l_sum
    }
}

.namespace @namespace {
    .name @id_namespace
}

.type @class public {
    .name @id_class
    .namespace @namespace

    .method @method_main public {
        .name @id_entry_point
        .signature @sig_main
        .body defined @code_main
    }
}

.entrypoint @method_main
